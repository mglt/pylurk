from time import sleep
from textwrap import indent

from pylurk.core.lurk import LurkUDPClient, LurkMessage, wrap
from pylurk.extensions.tls12 import Tls12RSAMasterConf
from pylurk.extensions.tls12_struct import ClientHello, ServerHello,\
    Certificate, ServerHelloDone, Random, ClientKeyExchange, PreMaster,\
    TLS12RSAMasterRequestPayload, TLS12RSAMasterResponsePayload

msg = LurkMessage()
#conf = LurkConf( ).get_type_conf( 'tls12', 'v1', 'rsa_master')[0]
utils = Tls12RSAMasterConf( )

number_title = 1

indent_title = "=="
indent_txt = "    "
indent_pkt = "    ..."
indent_value = "    > "
sleep_time = 10




def s_struct( struct, struct_name, value, line_len=60 ):
    s =  "%s"%struct_name +'\n' +\
         wrap( "%s"%struct.parse( struct.build( value ) ),\
                  line_len=line_len ) 
    return s    
        

def p_title( txt, no=number_title):
    global number_title
    pre_title = indent_title + " %i. "%number_title 
    s = indent( txt, pre_title  ) + " %s"%indent_title 
    print( "\n\n%s"%s )
    print("%s\n\n"%"".ljust( len( s ), "-" ) ) 
    number_title += 1

def p_txt( txt ):
    print( indent( txt, indent_txt) )

def p_pkt( txt, prefix=indent_pkt):
    print( indent( txt, indent_pkt ) )

p_txt( "This demo exposes the interactions between a TLS Server " +\
       "terminating a TLS session and a Key Server. " +\
       "The demo illustrates the case of RSA authentication" ) 

def instanciates_lurk_client():
    p_title( "Instantiating LurkUDPClient" )
    lurk_client = LurkUDPClient( )
    types = ""
    for t in lurk_client.conf.get_mtypes()[ ( 'tls12', 'v1' ) ]:
        types += indent("%s\n"%t, "    -" )
    p_txt( "LurkUDPClient started with capabilities:\n%s"%types )
    sleep( sleep_time )
    return lurk_client

def listening_client_hello():
    p_title( "Listening for ClientHello from TLS Client...")
    sleep( sleep_time )
    client_hello = utils.default_client_hello()
    p_pkt("%s"%s_struct( ClientHello, 'ClientHello', client_hello ) )
    p_pkt("---------->\n\n")
    sleep( sleep_time )
    return client_hello[ 'random' ]

def responding_server_hello( client_random ):
    p_title("Responding with a ServerHello to the TLS Client")
    sleep( sleep_time )
    server_random = utils.default_random() 
    o_server_random = utils.pfs( server_random, "sha256" )

    p_txt("a) Selecting cipher suite:\n%s"%\
        indent("TLS_RSA_WITH_AES_128_GCM_SHA256\n", indent_value ) )
    p_txt("b) Extracting client_random:\n%s"%\
        indent("%s"% s_struct( Random,  'Random', client_random ), indent_value ) )   
    p_txt("c) Generating a random (S):\n%s"%\
        indent("%s"% s_struct( Random, 'Random', server_random ), indent_value ) )   
    p_txt("d) Obfuscating S (server_random):\n%s\n"%\
        indent("%s"% s_struct( Random, 'Random', o_server_random ), indent_value ) )   
    p_txt("e) Sending the ServerHello\n")
    sleep( sleep_time )

    server_hello = utils.default_server_hello( 
                       random=o_server_random, \
                       cipher_suite="TLS_RSA_WITH_AES_128_GCM_SHA256" )
    certificate = utils.default_certificate()
    server_hello_done = {}
    p_pkt("%s"%s_struct( ServerHello, 'ServerHello', server_hello ) )
    p_pkt("%s"%s_struct( Certificate, 'Certificate', certificate ) )
    p_pkt("%s"%s_struct( ServerHelloDone, 'ServerHelloDone', b'' ) )
    p_pkt("<----------\n\n")
    sleep( sleep_time )
    return server_random

def listening_client_key_exchange():
    p_title( "Listening for Client Key Exchange from the TLS Client")
    sleep( sleep_time )
    encrypted_premaster = utils.default_encrypted_premaster()
    pkt_client_key_exchange = utils.default_encrypted_premaster(
        encrypted_premaster=encrypted_premaster )
    p_pkt( "%s"%s_struct( ClientKeyExchange, 'ClientKeyExchange', pkt_client_key_exchange ) )
    return encrypted_premaster

def generating_master_secret( lurk_client, encrypted_premaster, client_random,\
                             server_random):
    p_title("Generation of the master secret by the Key Server" )
    sleep( sleep_time )
    p_txt("The master secret is requested to the Key Server (LURK)\n" )
    p_txt("The master secret is generated by the Key Server\n")
    sleep( sleep_time )

    payload_args = {\
        'cert' : utils.cert[ 0 ],\
        'client_random' : client_random, \
        'server_random' : server_random, \
        'freshness_funct' : "sha256",
        'encrypted_premaster' : encrypted_premaster }
    query, response = lurk_client.resolve( designation='tls12', \
                                  version='v1', \
                                  type='rsa_master', \
                                  payload=payload_args )
    
    msg.show( query, prefix="          ..." )
    p_pkt("<----------", prefix="          ...")
    print("\n\n\n")
    msg.show( response, prefix="          ..." )
    p_pkt("---------->\n", prefix="          ...")
    sleep( sleep_time )
    return response[ 'payload' ][ 'master']

def finishing_tls_kex():
    p_title("Terminating the TLS Key Exchange with the TLS Client" )
    sleep( sleep_time )
    p_txt("""With the master secret, the TLS Key Exchange can be
          completed\n""" )
    p_pkt("[ChangeCipherSpec]")
    p_pkt("Finished")
    p_pkt("-------->")
    p_pkt("                    [ChangeCipherSpec]")
    p_pkt("                        Finished")
    p_pkt("                    <--------")
    p_pkt("Application Data      <------->     Application Data")




lurk_client = instanciates_lurk_client()
client_random = listening_client_hello()
server_random = responding_server_hello( client_random )
encrypted_premaster = listening_client_key_exchange()
master = generating_master_secret(lurk_client, encrypted_premaster, \
                                  client_random, server_random) 
finishing_tls_kex()


