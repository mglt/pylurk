#!/usr/bin/python3

import argparse
import subprocess
from graminelibos import Sigstruct
import os
import os.path
import hashlib

""" This script starts the server that provisions 
    the secret key.

The intent is to start the following server with our conventions:
RA_TLS_ALLOW_DEBUG_ENCLAVE_INSECURE=1 RA_TLS_ALLOW_OUTDATED_TCB_INSECURE=1 RA_TLS_EPID_API_KEY=646457af6dea4427a2aae2e78a7b6ecf ./server_epid "dac61ce6d1763f1875e5b486126ebe42ed7003f1c8e52938f18af508ee1b430a" "e725999b742f47419e5a074b32d8c869711d68d20d059dc987e5c87424cb37a9" 0 0 "4433" "../ssl/server.crt" "../ssl/server.key" "../ssl/_Ed25519PrivateKey-ed25519-pkcs8.der" 
"""
CS_GRAMINE_DIR = '/home/mglt/gitlab/pylurk.git/example/cli'
SIGSTRUCT_FILE = os.path.join( CS_GRAMINE_DIR, "python.sig" )
##RA_TLS_EPID_API_KEY = "646457af6dea4427a2aae2e78a7b6ecf"
GRAMINE_DIR =  '/home/mglt/gramine'

def attributes_from_sig( sig_file ):
  with open( sig_file, 'rb' ) as f:
    sig = Sigstruct.from_bytes( f.read() )
  
  mrenclave = sig["enclave_hash"].hex()
  mrsigner = hashlib.sha256()
  mrsigner.update(sig['modulus'])
  mrsigner = mrsigner.hexdigest()
  isv_prod_id = sig["isv_prod_id"]
  isv_svn = sig["isv_svn"]
  return { 'mrenclave' : mrenclave,\
           'mrsigner' : mrsigner,\
           'isv_prod_id' : isv_prod_id,\
           'isv_svn' : isv_svn }




if __name__ == '__main__' :
  os.chdir( CS_GRAMINE_DIR )  
  description = """ RA TLS Provisioning Server """
  parser = argparse.ArgumentParser( description=description )
  parser.add_argument( '-mrenclave', '--mrenclave', type=ascii, \
  default='None', nargs='?', help='mr_enclave value in hexadecimal')
  parser.add_argument( '-mrsigner', '--mrsigner', type=ascii, \
  default='None', nargs='?', help='mr_signer value in hexadecimal')
  parser.add_argument( '-isv_prod_id', '--isv_prod_id', type=ascii, \
  default='None', nargs='?', help='isv_prod_id (string)')
  parser.add_argument( '-isv_svn', '--isv_svn', type=ascii, \
  default='None', nargs='?', help='isv_svn (string)')
  parser.add_argument( '-sig_file', '--sig_file', type=ascii, \
  default=SIGSTRUCT_FILE, nargs='?', help='SIGSTRUCT file (string) from which mrenclave, mrsigner, isv_prod_id and isv_svn are read')
  parser.add_argument( '-port', '--port', type=ascii, \
  default='4433', nargs='?', help='Port the server listens to.')
  parser.add_argument( '-cert', '--cert', type=ascii, \
  default='../tls_secret_prov/server.crt', nargs='?', help='server certificate')
  parser.add_argument( '-key', '--key', type=ascii, \
  default='../tls_secret_prov/server.key', nargs='?', help='server key')
  parser.add_argument( '-secret', '--secret', type=ascii, \
  default='../sig_key_dir/_Ed25519PrivateKey-ed25519-pkcs8.der', nargs='?', help='Provisioned secret')
  parser.add_argument( '-b', '--build', default=False,  \
  action='store_const', const=True, \
  help='Building the Secret Provisioning Service')
  parser.add_argument( '-epid_api_key', '--epid_api_key', type=ascii, \
  default='None', nargs='?', help='RA_TLS_EPID_API_KEY (string)')
  

  args = parser.parse_args()
  print( f"Starting Secret Provision Service:" )
  if args.build is True:
    cmd = f"make -f Makefile_server_prov clean && make -f Makefile_server_prov app epid GRAMINEDIR={GRAMINE_DIR}" 
    print( f"Building Service Provisioning: {cmd}")
    subprocess.Popen( f"{cmd}", shell=True )
    os._exit( 0 )


  if args.mrenclave != "'None'" and args.mrsigner != "'None'" and\
     args.isv_prod_id != "'None'" and args.isv_svn != "'None'": 
    attributes = { 'mrenclave' : args.mrenclave[1:-1],\
                   'mrsigner' : args.mrsigner[1:-1],\
                   'isv_prod_id' : args.isv_prod_id[1:-1],\
                   'isv_svn' : args.isv_svn[1:-1] }
  else:
    print( f"(Reading attributes from {args.sig_file[1:-1]})" )
    attributes = attributes_from_sig( args.sig_file[1:-1] )
  print( f"    - mrenclave: {attributes[ 'mrenclave' ]}\n"\
         f"    - mrsigner: {attributes[ 'mrsigner' ]}\n"\
         f"    - isv_prod_id: {attributes[ 'isv_prod_id' ]}\n"\
         f"    - isv_svn: {attributes[ 'isv_svn' ]} \n"\
         f"    - secret: {args.secret[1:-1]}\n" )
  os.chdir( os.path.join( CS_GRAMINE_DIR, 'secret_prov' ) )  
  subprocess.Popen( f"RA_TLS_ALLOW_DEBUG_ENCLAVE_INSECURE=1 RA_TLS_ALLOW_OUTDATED_TCB_INSECURE=1 RA_TLS_EPID_API_KEY={args.epid_api_key[1:-1]} ./server_epid {attributes[ 'mrenclave' ]} {attributes[ 'mrsigner' ]} {attributes[ 'isv_prod_id' ]} {attributes[ 'isv_svn' ]} {args.port} {args.cert} {args.key} {args.secret[1:-1]}", shell=True )

      


